/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AlchemistNFTInterface extends ethers.utils.Interface {
  functions: {
    "Alchemist()": FunctionFragment;
    "Jpeg()": FunctionFragment;
    "NFTWrapper()": FunctionFragment;
    "acceptAdmin()": FunctionFragment;
    "admin()": FunctionFragment;
    "curveData()": FunctionFragment;
    "initialize(address,address,address,address,address,(address,uint8))": FunctionFragment;
    "lockNft(address,uint256,uint256,address,address,uint256)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "pUsd()": FunctionFragment;
    "pendingAdmin()": FunctionFragment;
    "setPendingAdmin(address)": FunctionFragment;
    "setUpAlchemistV2(address,uint256)": FunctionFragment;
    "setUpCurve(address,uint256)": FunctionFragment;
    "setUpJpeg(address)": FunctionFragment;
    "unlockNFT(address,uint256,uint256,address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "Alchemist", values?: undefined): string;
  encodeFunctionData(functionFragment: "Jpeg", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "NFTWrapper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "curveData", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      string,
      string,
      { Curve: string; pUsdIndex: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lockNft",
    values: [string, BigNumberish, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "pUsd", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpAlchemistV2",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpCurve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setUpJpeg", values: [string]): string;
  encodeFunctionData(
    functionFragment: "unlockNFT",
    values: [string, BigNumberish, BigNumberish, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "Alchemist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Jpeg", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NFTWrapper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "curveData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockNft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pUsd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpAlchemistV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUpCurve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUpJpeg", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unlockNFT", data: BytesLike): Result;

  events: {
    "AdminUpdated(address)": EventFragment;
    "Initialized(address,address,address,address)": EventFragment;
    "NFTLocked(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "NFTUnlocked(address,address,uint256,uint256)": EventFragment;
    "PendingAdminUpdated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTUnlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PendingAdminUpdated"): EventFragment;
}

export type AdminUpdatedEvent = TypedEvent<[string] & { admin: string }>;

export type InitializedEvent = TypedEvent<
  [string, string, string, string] & {
    Alchemist: string;
    NFTWrapper: string;
    Jpeg: string;
    Curve: string;
  }
>;

export type NFTLockedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    user: string;
    nft: string;
    nftId: BigNumber;
    pUsdMinted: BigNumber;
    daiDeposited: BigNumber;
    shares: BigNumber;
  }
>;

export type NFTUnlockedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    user: string;
    nft: string;
    nftId: BigNumber;
    alchemixTokensRepaid: BigNumber;
  }
>;

export type PendingAdminUpdatedEvent = TypedEvent<
  [string] & { pendingAdmin: string }
>;

export class AlchemistNFT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AlchemistNFTInterface;

  functions: {
    Alchemist(overrides?: CallOverrides): Promise<[string]>;

    Jpeg(overrides?: CallOverrides): Promise<[string]>;

    NFTWrapper(overrides?: CallOverrides): Promise<[string]>;

    acceptAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    curveData(
      overrides?: CallOverrides
    ): Promise<[string, number] & { Curve: string; pUsdIndex: number }>;

    initialize(
      _alchemist: string,
      _nftWrapper: string,
      _jpeg: string,
      _pUsd: string,
      _admin: string,
      _curveData: { Curve: string; pUsdIndex: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockNft(
      _nft: string,
      _nftId: BigNumberish,
      amountToBorrow: BigNumberish,
      underlyingToken: string,
      yieldToken: string,
      curveTokenIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pUsd(overrides?: CallOverrides): Promise<[string]>;

    pendingAdmin(overrides?: CallOverrides): Promise<[string]>;

    setPendingAdmin(
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUpAlchemistV2(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUpCurve(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUpJpeg(
      nft: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockNFT(
      _nft: string,
      _nftId: BigNumberish,
      amountToRepay: BigNumberish,
      underlyingToken: string,
      yieldToken: string,
      curveTokenIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  Alchemist(overrides?: CallOverrides): Promise<string>;

  Jpeg(overrides?: CallOverrides): Promise<string>;

  NFTWrapper(overrides?: CallOverrides): Promise<string>;

  acceptAdmin(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  curveData(
    overrides?: CallOverrides
  ): Promise<[string, number] & { Curve: string; pUsdIndex: number }>;

  initialize(
    _alchemist: string,
    _nftWrapper: string,
    _jpeg: string,
    _pUsd: string,
    _admin: string,
    _curveData: { Curve: string; pUsdIndex: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockNft(
    _nft: string,
    _nftId: BigNumberish,
    amountToBorrow: BigNumberish,
    underlyingToken: string,
    yieldToken: string,
    curveTokenIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pUsd(overrides?: CallOverrides): Promise<string>;

  pendingAdmin(overrides?: CallOverrides): Promise<string>;

  setPendingAdmin(
    value: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUpAlchemistV2(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUpCurve(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUpJpeg(
    nft: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockNFT(
    _nft: string,
    _nftId: BigNumberish,
    amountToRepay: BigNumberish,
    underlyingToken: string,
    yieldToken: string,
    curveTokenIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    Alchemist(overrides?: CallOverrides): Promise<string>;

    Jpeg(overrides?: CallOverrides): Promise<string>;

    NFTWrapper(overrides?: CallOverrides): Promise<string>;

    acceptAdmin(overrides?: CallOverrides): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    curveData(
      overrides?: CallOverrides
    ): Promise<[string, number] & { Curve: string; pUsdIndex: number }>;

    initialize(
      _alchemist: string,
      _nftWrapper: string,
      _jpeg: string,
      _pUsd: string,
      _admin: string,
      _curveData: { Curve: string; pUsdIndex: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    lockNft(
      _nft: string,
      _nftId: BigNumberish,
      amountToBorrow: BigNumberish,
      underlyingToken: string,
      yieldToken: string,
      curveTokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    pUsd(overrides?: CallOverrides): Promise<string>;

    pendingAdmin(overrides?: CallOverrides): Promise<string>;

    setPendingAdmin(value: string, overrides?: CallOverrides): Promise<void>;

    setUpAlchemistV2(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUpCurve(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUpJpeg(nft: string, overrides?: CallOverrides): Promise<void>;

    unlockNFT(
      _nft: string,
      _nftId: BigNumberish,
      amountToRepay: BigNumberish,
      underlyingToken: string,
      yieldToken: string,
      curveTokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminUpdated(address)"(
      admin?: null
    ): TypedEventFilter<[string], { admin: string }>;

    AdminUpdated(admin?: null): TypedEventFilter<[string], { admin: string }>;

    "Initialized(address,address,address,address)"(
      Alchemist?: string | null,
      NFTWrapper?: null,
      Jpeg?: null,
      Curve?: null
    ): TypedEventFilter<
      [string, string, string, string],
      { Alchemist: string; NFTWrapper: string; Jpeg: string; Curve: string }
    >;

    Initialized(
      Alchemist?: string | null,
      NFTWrapper?: null,
      Jpeg?: null,
      Curve?: null
    ): TypedEventFilter<
      [string, string, string, string],
      { Alchemist: string; NFTWrapper: string; Jpeg: string; Curve: string }
    >;

    "NFTLocked(address,address,uint256,uint256,uint256,uint256)"(
      user?: string | null,
      nft?: string | null,
      nftId?: null,
      pUsdMinted?: null,
      daiDeposited?: null,
      shares?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        nft: string;
        nftId: BigNumber;
        pUsdMinted: BigNumber;
        daiDeposited: BigNumber;
        shares: BigNumber;
      }
    >;

    NFTLocked(
      user?: string | null,
      nft?: string | null,
      nftId?: null,
      pUsdMinted?: null,
      daiDeposited?: null,
      shares?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        nft: string;
        nftId: BigNumber;
        pUsdMinted: BigNumber;
        daiDeposited: BigNumber;
        shares: BigNumber;
      }
    >;

    "NFTUnlocked(address,address,uint256,uint256)"(
      user?: string | null,
      nft?: string | null,
      nftId?: null,
      alchemixTokensRepaid?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        user: string;
        nft: string;
        nftId: BigNumber;
        alchemixTokensRepaid: BigNumber;
      }
    >;

    NFTUnlocked(
      user?: string | null,
      nft?: string | null,
      nftId?: null,
      alchemixTokensRepaid?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        user: string;
        nft: string;
        nftId: BigNumber;
        alchemixTokensRepaid: BigNumber;
      }
    >;

    "PendingAdminUpdated(address)"(
      pendingAdmin?: null
    ): TypedEventFilter<[string], { pendingAdmin: string }>;

    PendingAdminUpdated(
      pendingAdmin?: null
    ): TypedEventFilter<[string], { pendingAdmin: string }>;
  };

  estimateGas: {
    Alchemist(overrides?: CallOverrides): Promise<BigNumber>;

    Jpeg(overrides?: CallOverrides): Promise<BigNumber>;

    NFTWrapper(overrides?: CallOverrides): Promise<BigNumber>;

    acceptAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    curveData(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _alchemist: string,
      _nftWrapper: string,
      _jpeg: string,
      _pUsd: string,
      _admin: string,
      _curveData: { Curve: string; pUsdIndex: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockNft(
      _nft: string,
      _nftId: BigNumberish,
      amountToBorrow: BigNumberish,
      underlyingToken: string,
      yieldToken: string,
      curveTokenIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pUsd(overrides?: CallOverrides): Promise<BigNumber>;

    pendingAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    setPendingAdmin(
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUpAlchemistV2(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUpCurve(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUpJpeg(
      nft: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockNFT(
      _nft: string,
      _nftId: BigNumberish,
      amountToRepay: BigNumberish,
      underlyingToken: string,
      yieldToken: string,
      curveTokenIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    Alchemist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Jpeg(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NFTWrapper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    curveData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _alchemist: string,
      _nftWrapper: string,
      _jpeg: string,
      _pUsd: string,
      _admin: string,
      _curveData: { Curve: string; pUsdIndex: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockNft(
      _nft: string,
      _nftId: BigNumberish,
      amountToBorrow: BigNumberish,
      underlyingToken: string,
      yieldToken: string,
      curveTokenIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pUsd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPendingAdmin(
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUpAlchemistV2(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUpCurve(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUpJpeg(
      nft: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockNFT(
      _nft: string,
      _nftId: BigNumberish,
      amountToRepay: BigNumberish,
      underlyingToken: string,
      yieldToken: string,
      curveTokenIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
