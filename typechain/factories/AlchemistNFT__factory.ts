/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { AlchemistNFT, AlchemistNFTInterface } from "../AlchemistNFT";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_alchemist",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "Alchemist",
    outputs: [
      {
        internalType: "contract IAlchemistV2",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161036b38038061036b83398101604081905261002f91610122565b600054610100900460ff1661004a5760005460ff1615610052565b610052610101565b6100b95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff161580156100db576000805461ffff19166101011790555b6001600160a01b03821660805280156100fa576000805461ff00191690555b5050610152565b60006101163061011c60201b6100b61760201c565b15905090565b3b151590565b60006020828403121561013457600080fd5b81516001600160a01b038116811461014b57600080fd5b9392505050565b6080516101ff61016c6000396000607c01526101ff6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063150b7a021461003b578063ab7efa0314610077575b600080fd5b6100596100493660046100ee565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020015b60405180910390f35b61009e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161006e565b3b151590565b80356001600160a01b03811681146100d357600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561010457600080fd5b61010d856100bc565b935061011b602086016100bc565b92506040850135915060608501356001600160401b038082111561013e57600080fd5b818701915087601f83011261015257600080fd5b813581811115610164576101646100d8565b604051601f8201601f19908116603f0116810190838211818310171561018c5761018c6100d8565b816040528281528a60208487010111156101a557600080fd5b8260208601602083013760006020848301015280955050505050509295919450925056fea264697066735822122043231b6046bd0e138bdade629b7685bdc6aa9d8c082d91d3263d680ab1d36e9064736f6c634300080b0033";

export class AlchemistNFT__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _alchemist: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AlchemistNFT> {
    return super.deploy(_alchemist, overrides || {}) as Promise<AlchemistNFT>;
  }
  getDeployTransaction(
    _alchemist: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_alchemist, overrides || {});
  }
  attach(address: string): AlchemistNFT {
    return super.attach(address) as AlchemistNFT;
  }
  connect(signer: Signer): AlchemistNFT__factory {
    return super.connect(signer) as AlchemistNFT__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AlchemistNFTInterface {
    return new utils.Interface(_abi) as AlchemistNFTInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AlchemistNFT {
    return new Contract(address, _abi, signerOrProvider) as AlchemistNFT;
  }
}
